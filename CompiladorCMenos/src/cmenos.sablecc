Package compilador.sablecc;

Helpers

	caractere_entrada_unicode = [0..0xffff];
	ht = 0x0009;
	lf = 0x000a;
	ff = 0x000c;
	cr = 0x000d;
	sp = ' ';
	
	letra_minuscula = ['a'..'z'];
	letra_maiscula = ['A'..'Z'];
	letra = letra_minuscula | letra_maiscula;
	digito = ['0'..'9'];
	
	terminador_de_linha = lf | cr | cr lf;
	espaco_em_branco = (sp | ht | ff | terminador_de_linha);
	
	caractere_de_entrada = [caractere_entrada_unicode - [cr + lf]];
	comentario_de_linha = '//' caractere_de_entrada* terminador_de_linha?;
	
	sequencia_escape = '\b' | '\t' | '\n' | '\f' | '\r' | '\"' | '\' ''' | '\\';
	caractere_string = [caractere_de_entrada - ['"' + '\']] | sequencia_escape;
	
Tokens
	
	/* Palavras chaves */
	else = 'else';
	if = 'if';
	int = 'int';
	string = 'string';
	return = 'return';
	void = 'void';
	while = 'while';
	
	/* Símbolos especiais */
	soma = '+';
	sub = '-';
	mult = '*';
	div = '/';
	menorq = '<';
	menorig = '<=';
	maiorq = '>';
	maiorig = '>=';
	igual = '==';
	nao = '!=';
	atrib = '=';
	ptvirg = ';';
	virg = ',';
	apar = '(';
	fpar = ')';
	acol = '[';
	fcol = ']';
	achave = '{';
	fchave = '}';
	
	id = letra+;
	num = digito+;
	
	string_literal = '"' caractere_string* '"';
	
	espacos_em_branco = espaco_em_branco+;
	comentario = comentario_de_linha;
	
Ignored Tokens

	espacos_em_branco, comentario;